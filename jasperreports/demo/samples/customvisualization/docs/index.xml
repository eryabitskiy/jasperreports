<?xml version="1.0" encoding="UTF-8"?>

<sample>

  <name>customvisualization</name>
  <title>Custom Visualization Components Sample</title>
  <description>Shows how JavaScript based visualizations could be included in reports using the Custom Visualization Component.</description>

  <mainFeature ref="customvisualization"/>
  
  <!-- customvisualization -->
  
  <feature name="customvisualization" title="Custom Visualization Components">
    <description>
Shows how to render a custom visualization in a report, using the custom visualization component shipped with the JasperReports library.
    </description>
    <since>6.7.0</since>
    <documentedBy>
      <author>
    	<name>Giulio Toffoli</name>
    	<email>gt78@users.sourceforge.net</email>
      </author>
    </documentedBy>
    <content>
<b>Custom Visualization Component Overview</b>    
<br/>
<br/>
The Custom Visualization Component allows to render an SVG image generated by using JavaScript code.<br/>
Its main goal is to leverage JavaScript visualization libraries (such as d3.js) in order
to produce content to be rendered in the report.<br/>
This component does not produce any content itself, instead it acts as bridge between the JasperReports library
and the JavaScript module provided by the user, which at the end is responsible to produce the visualization.<br/>
In case the report is exported to HTML, the JavaScript code is executed directly inside the final document. This allows
to take full advantage of the browser functionalities.<br/>
When the report is exported to other file formats (such as PDF or MS Word), the component takes care of rendering
the SVG image produced by the JavaScript code, behaving like a regular image element.<br/>
If the script does not produce SVG image, but more complex HTML, the visualization can be rendered as PNG image when exported
to formats different from HTML.
<br/>
<br/>
<subtitle name="schema">Custom Visualization Component Schema</subtitle>
<br/>
<br/>
Below is the main part of the custom visualization component schema.
As any other component element, the <code>evaluationTime</code> and <code>evaluationGroup</code> attributes are provided:

<pre><![CDATA[<element name="customvisualization" substitutionGroup="jr:component">
<complexType>
<complexContent>
    <extension base="jr:componentType">
    <sequence>
        <element name="itemProperty" type="c:ItemProperty" minOccurs="0" maxOccurs="unbounded" />
        <element ref="cvc:cvData" minOccurs="0" maxOccurs="unbounded" />
    </sequence>
    <attribute name="evaluationTime" type="jr:basicEvaluationTime" use="optional" default="Now"/>
    <attribute name="evaluationGroup" type="string" use="optional"/>
    <attribute name="processingClass" type="string" use="optional"/>
    <attribute name="onErrorType" use="optional" default="Error">
        <simpleType>
        <restriction base="string">
            <enumeration value="Error"/>
            <enumeration value="Blank"/>
            <enumeration value="Icon"/>
        </restriction>
        </simpleType>
    </attribute>
    </extension>
</complexContent>
</complexType>
</element>]]></pre>


<subtitle name="schema">Main Properties</subtitle>
<br/>
<br/>
Since the custom visualization component works like a wrapper, its definition is very generic and based on
simple properties (<code>itemProperty</code>). There are four common properties that can be used with
any custom visualization component:
<ul>
    <li><code>script</code> - the location of the JavaScript file implementing the component</li>
    <li><code>module</code> - (optional) the name of the JavaScript module to be loaded by using RequireJs (if not specified,
    the base name of the JavaScript file without extensions will be assumed as name of the module)</li>
    <li><code>css</code> - (optional) the location of a CSS file eventually used by the component</li>
    <li><code>renderAsPng</code> - (optional) a boolean value that can be used when the content produced is not an SVG image</li>
</ul>

All the configured properties will be passed to the JavaScript function in charge of rendering the visualization.<br/>
The value for the properties can be either a static value or a value defined by means of an expression.
<br/>
<br/>
<subtitle name="schema">Configuring Data Series</subtitle>
<br/>
<br/>
One or more series of data may be provided to the script implementing the visualization by means of <code>cvData</code>
elements:<br/>

<pre><![CDATA[<element name="cvData">
  <complexType>
    <sequence>
      <element ref="jr:dataset" minOccurs="0" maxOccurs="1"/>
      <element ref="cvc:item" minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
</element>]]></pre>

A <code>cvData</code> can collect its data either from a subdataset, or from a hardcoded list of <code>cvc:item</code>. 
Each <code>cvc:item</code> is defined by a set of <code>ItemProperty</code> elements. The name of each item property to
be set for each <code>cvc:item</code> depends by the component we are working with.<br/>
<br/>
The Sparkline sample uses a subdataset to populate a simple series of values. In this case each <code>cvc:item</code>
has a single <code>ItemProperty</code> called <i>value</i>.<br/>

<br/>
<br/>
<subtitle name="customvisualization_components">Custom Visualization Component Samples</subtitle>
<br/>
<br/>
This sample contains the implementation of 4 custom visualizations:
<ul>
<li><b>Figures</b> - A d3.js based visualization to represent a quantity by using figures.<br/>
    <img src="figures.png"/><br/><br/>
</li>
<li><b>Radial Progress</b> - A d3.js based visualization to display a percentage value with a circle<br/>
    <img src="radialprogress.png"/><br/><br/>
</li>
<li><b>Sparkline</b> - A d3.js based minimalistic line chart which displays data coming from a sub-dataset<br/>
    <img src="sparkline.png"/><br/><br/>
</li>
<li><b>LeafLet Markers</b> - A map with markers implemented by using the LeafLet.js mapping library<br/>
    <img src="leafletmarkers.png"/><br/><br/>
</li>
</ul>

The source code of the custom visualizations can be found in the
<code>demo/samples/customvisualization/components</code> folder.<br/>
Each custom visualization is composed by one or more JavaScript files that are combined and optimized by using RequireJs.<br/>
This optimization process creates a single minified JavaScript file which represents the custom visualization component
referenced inside the report template by means of the <code>script</code> property described above.<br/><br/>
To generate the components from the sources, in a command prompt/terminal window set the current folder to <code>demo/samples/customvisualization</code>
within the JasperReports source project and run the <code>&gt; ant components</code> command.<br/>
The generated components will be saved in <code>demo/samples/customvisualization/build/components</code>, each in its own directory.

<br/>
<br/>
<subtitle name="customvisualization_sample">Custom Visualization JRXML Samples</subtitle>
<br/>
<br/>
This sample contains 4 JRXML files, one for each custom visualization.

<ol start="1">
<li><subtitle name="figures_report">Figures</subtitle>
<br/>
<br/>
This report template shows how to use the Figures component with different configuration options.<br/>
The report does not use any data; for each component a static value is set for the property "itemsValue".
</li>
</ol>

<ol start="2">
<li><subtitle name="radial_progress_report">Radial Progress</subtitle>
<br/>
<br/>
This report template shows how to use the Radial Progress component with different configuration options.<br/>
The report does not use any data; for each component a static value is set for the property "value".
</li>
</ol>
<ol start="3">
<li><subtitle name="sparkline_report">Sparkline</subtitle>
<br/>
<br/>
This report template shows how to use the Sparkline component with different configuration options.<br/>
The report does not use any data; for each component a sub-dataset is feed with static JSON data by using an expression.
</li>
</ol>
<ol start="4">
<li><subtitle name="shipments_report">LeafLet Markers</subtitle>
<br/>
<br/>
This report template shows how to use the LeafLet Markers component. Marker locations are read by a JSON file provided with the sample.<br/>
Differently from the other samples, this one uses the property <code>saveAsPng</code> since the JavaScript code does not produce
an SVG, but a more complex HTML visualization.
<br/>
</li>
</ol>

<br/>
<br/>
<b>Running the Sample</b>
<br/>
<br/>
Running the sample requires the <a href="http://ant.apache.org/">Apache Ant</a> library. Make sure that <code>ant</code> is already installed on your system (version 1.5 or later).
<br/>
In a command prompt/terminal window set the current folder to <code>demo/samples/customvisualization</code> within the JasperReports source project and run the <code>&gt; ant test view</code> command.
<br/>
It will generate all supported document types containing the sample report in the <code>demo/samples/customvisualization/build/reports</code> directory. 
<br/>
Then the report will open in the JasperReports internal viewer.
    </content>
  </feature>
</sample>
